#include <iostream>
#include <vector>
#include <chrono>
using namespace std;

int fibonacciRecursive(int n){
    if (n <= 1)
        return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

int fibonacciDP(int n){
    if (n <= 1)
        return n;
    std::vector<int> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; ++i){
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[n];
}

void measureExecutionTime(int n){
    auto start = chrono::high_resolution_clock::now();
    fibonacciRecursive(n);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> duration = end - start;
    cout << "Rekursif untuk n = " << n << ": " << duration.count() << " detik\n";

    start = chrono::high_resolution_clock::now();
    fibonacciDP(n);
    end = chrono::high_resolution_clock::now();
    duration = end - start;
    cout << "Dynamic Programming untuk n = " << n << ": " << duration.count() << " detik\n";
}

int main(){
    vector<int> testValues = {10, 25, 30, 40, 50};
    for (int n : testValues){
        measureExecutionTime(n);
    }
    return 0;
}
